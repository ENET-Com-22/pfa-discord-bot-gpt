# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node Js Ci Haitham

on: 
  push: 
    branches: [ "haitham" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: haitham
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npm ci
      - name: Run tests
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          OPENAI_ORG: ${{ secrets.OPENAI_ORG }}
        run: npm test
  docker:

    runs-on: ubuntu-latest
    environment: haitham
    needs: build
    steps:
    - uses: actions/checkout@v1
    - name: Build & Push Image
      run: |
        docker login -u ${{ secrets.DOCKERUSER }} -p ${{ secrets.DOCKERPW }}
        docker build . -t ${{ secrets.DOCKERUSER }}/discord-bot:latest
        docker push ${{ secrets.DOCKERUSER }}/discord-bot:latest
        
  build-and-deploy:
        runs-on: ubuntu-latest
        environment: haitham
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        - run: |
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/discordbot:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/discordbot:${{ github.sha }}

        - name: 'Deploy to Azure Container Instances'
          uses: 'azure/aci-deploy@v1'
          with:
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
            image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
            registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            registry-username: ${{ secrets.REGISTRY_USERNAME }}
            registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            name: aci-sampleapp
            location: 'northeurope'
